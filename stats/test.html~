<!doctype html>
<html lang="en">
<head>
</head>
<body>
<script src="http://code.jquery.com/jquery-1.9.1.js"></script>	
<script type="text/javascript" src="svg.js-master/dist/svg.js" charset="utf-8"></script>
<script type="text/javascript" src="svg.js-master/src/helper.js"></script>
<script type="text/javascript" src="svg.js-master/src/svg.js"></script>
<script type="text/javascript" src="svg.js-master/src/container.js"></script>
<script type="text/javascript" src="svg.js-master/src/element.js"></script>
<script type="text/javascript" src="svg.js-master/src/memory.js"></script>
<script type="text/javascript" src="svg.js-master/src/arrange.js"></script>
<script type="text/javascript" src="svg.js-master/src/bbox.js"></script>
<script type="text/javascript" src="svg.js-master/src/rect.js"></script>
<script type="text/javascript" src="svg.js-master/src/ellipse.js"></script>
<script type="text/javascript" src="svg.js-master/src/line.js"></script>
<script type="text/javascript" src="svg.js-master/src/poly.js"></script>
<script type="text/javascript" src="svg.js-master/src/polyline.js"></script>
<script type="text/javascript" src="svg.js-master/src/polygon.js"></script>
<script type="text/javascript" src="svg.js-master/src/path.js"></script>
<script type="text/javascript" src="svg.js-master/src/image.js"></script>
<script type="text/javascript" src="svg.js-master/src/text.js"></script>
<script type="text/javascript" src="svg.js-master/src/textpath.js"></script>
<script type="text/javascript" src="svg.js-master/src/doc.js"></script>
<script type="text/javascript" src="svg.js-master/src/data.js"></script>

<script type="text/javascript" src="svg.js-master/src/group.js"></script>
<script type="text/javascript" src="svg.js-master/src/set.js"></script>
<script type="text/javascript" src="svg.js-master/src/gradient.js"></script>
<script type="text/javascript" src="svg.js-master/src/use.js"></script>
<script type="text/javascript" src="svg.js-master/src/mask.js"></script>
<script type="text/javascript" src="svg.js-master/src/clip.js"></script>
<script type="text/javascript" src="svg.js-master/src/color.js"></script>
<script type="text/javascript" src="svg.js-master/src/number.js"></script>
<script type="text/javascript" src="svg.js-master/src/array.js"></script>
<script type="text/javascript" src="svg.js-master/src/sugar.js"></script>
<script type="text/javascript" src="svg.filter.js-master/svg.filter.js"></script>



<script>
	$(function() {
		var PercentBars = function (data,options) {
			
			 var default_args = {
        		        id		: "canvas",
				axisOrigin 	: [50,50],
				barHeight 	: 50,
				barWidth 	: 300,
				barChartHeight  : 20,
        		        background	: "#F9F9F9",
        		        
        		        textFromAxisDist: [30, 25],
				scoreFromBarDist: 10,
			
	
				font 		: { family:   'Helvetica', size:     14},
				
				greenFill 	: {color:'#42E73A', opacity: 0.8},
				redFill 	: {color:'#f03', opacity: 0.6},
				barStroke 	: {stroke: 'black', width:2,linejoin:"round",opacity: 0.7},
				gridStroke	: {width: 1,opacity: 0.6,},
				borderStroke	: {width: 1,dasharray: "5,5", opacity: 0.6},				
				
				axis_prec 	: 25,
        		}
		        for(var index in default_args) {
                		if(typeof options[index] == "undefined")
                		        options[index] = default_args[index];
		        }	
        
		        this.id = options['id'];
		        

			this.data = data;
			
			this.axisOrigin = options['axisOrigin'];
			this.barHeight = options['barHeight'];
			this.barWidth = options['barWidth'];
			this.barChartHeight = options['barChartHeight'];
			

			
			this.textFromAxisDist = options['textFromAxisDist'];
			this.scoreFromBarDist = options['scoreFromBarDist'];
			
			
			this.font = options['font'];
			this.greenFill = options['greenFill'];
			this.redFill = options['redFill'];
			
			this.barStroke = options['barStroke'];
			this.gridStroke = options['gridStroke'];
			this.borderStroke = options['borderStroke'];
				
			this.axis_prec = options['axis_prec'];
			
			this.numBars = this.data.length;
			
			this.svg = options['svg'] ? options['svg'] : 
				SVG(this.id).size(
					options['Width' ]?options['Width' ]:
					this.barWidth+this.axisOrigin[0]+40,
		     			options['Height']?options['Height']:
		     			this.barHeight*this.numBars+
		     				this.axisOrigin[1]+40);			
	
			this.drawBar = function(bar, n) {
				bar.chart = {};
				
				
				/* Drawing */
				
				
				bar.chart.red = this.svg.rect(this.barWidth, this.barChartHeight);
				bar.chart.red.fill(this.redFill);				
				bar.chart.green = this.svg.rect((bar.value/100)*(this.barWidth), this.barChartHeight);
				bar.chart.green.fill(this.greenFill);//.data('bar', bar);


				

				
				bar.chart.label = this.svg.text(bar.label).font(this.font);
 				bar.chart.valueString = this.svg.text(bar.value + '%').font(this.font);

				bar.chart.border = this.svg.line(this.axisOrigin[0],
								 this.barHeight*n+this.axisOrigin[1],
								 this.axisOrigin[0]+this.barWidth, 
								 (this.barHeight)*n+this.axisOrigin[1]).stroke(this.borderStroke);
								 
				/* Addin extra functionability */
				
				
//				bar.chart.red.on('click', this.onclick);
//				bar.chart.green.on('click', this.onclick);
				
				/* Positioning */
				bar.chart.green.x(this.axisOrigin[0]);
				bar.chart.label.x(this.axisOrigin[0] - this.textFromAxisDist[0]);
				bar.chart.red.x(this.axisOrigin[0]);
 				bar.chart.valueString.x(this.axisOrigin[0] + this.barWidth + this.scoreFromBarDist);
 				
				var cY = this.axisOrigin[1]+(this.barHeight)*(n-0.5);

				bar.chart.red.cy(cY);
				bar.chart.green.cy(cY);
				bar.chart.label.cy(cY);
				bar.chart.valueString.cy(cY);

				bar.chart.barStroke = this.svg.polyline([ [this.axisOrigin[0],cY-this.barChartHeight/2], 
 								       [this.axisOrigin[0]+this.barWidth,cY-this.barChartHeight/2],
 								       [this.axisOrigin[0]+this.barWidth,cY+this.barChartHeight/2],
 								       [this.axisOrigin[0],cY+this.barChartHeight/2]] ).
 								       fill('none').stroke(this.barStroke);
 								        								       


			
			}
			this.drawBars = function() {
				var n = 1;
				for(var index in this.data) {
					var elem = this.data[index];
					this.drawBar(elem, n++);
				}
			}
	
			this.drawGrid = function () {
				var k = (this.barWidth*this.axis_prec)/100;
				for(i=0; i<=this.barWidth; i+= k ) {
					this.svg.line(this.axisOrigin[0] + i,
						      this.axisOrigin[1],
						      this.axisOrigin[0] + i, 
						      this.barHeight*this.numBars + this.axisOrigin[1] 
						      ).stroke(this.gridStroke)
					this.svg.text(""+((i/k)*this.axis_prec)+"%")
						.y(this.axisOrigin[1]-this.textFromAxisDist[1])
						.cx(this.axisOrigin[0] + i).font(this.font);
					
					
					
				}
			}
			this.drawAxis = function() {
				this.svg.line(this.axisOrigin[0],this.axisOrigin[1],
					      this.axisOrigin[0], this.barHeight*this.numBars + this.axisOrigin[1]+12 
					      ).stroke({ width: 1 });
				this.svg.line(this.axisOrigin[0],this.axisOrigin[1],
					      this.barWidth+this.axisOrigin[0]+12, this.axisOrigin[1]).stroke({ width: 1 });
			}
			
			this.draw = function() {
				this.drawGrid();
				this.drawBars();
				this.drawAxis();
			}
			return this;
		};
		var f = function(){
			return Math.floor(Math.random() *100);
		}
		var B = new PercentBars([
				{ 'label': 'B1','value': (f)()},
				{ 'label': 'B2','value': (f)()},
				{ 'label': 'B3','value': (f)()},
				{ 'label': 'B4','value': (f)()},
				{ 'label': 'B5','value': (f)()},
				{ 'label': 'B6','value': (f)()},
				{ 'label': 'B7','value': (f)()},
				{ 'label': 'B8','value': (f)()},
				{ 'label': 'B9','value': (f)()},
				{ 'label': 'B10','value': (f)()},
				{ 'label': 'B11','value': (f)()},
				{ 'label': 'B12','value': (f)()},
				{ 'label': 'B13','value': (f)()},
				{ 'label': 'B14','value': (f)()},
				{ 'label': 'B15','value': (f)()},
				{ 'label': 'B16','value': (f)()},
				{ 'label': 'C1','value': (f)()},
				{ 'label': 'C2','value': (f)()},
				{ 'label': 'C3','value': (f)()},
				{ 'label': 'C4','value': (f)()},
				{ 'label': 'C5','value': (f)()},
				{ 'label': 'C6','value': (f)()},
				
			], {}).draw();;
		B.draw();
	});	
</script>

<body>

<div id="canvas"></div>

</body>











